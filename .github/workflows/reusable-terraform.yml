---
on:
  workflow_call:
    inputs:
      environments:
        description: "List of environments to run Terraform against"
        required: true
        type: string

permissions: {}

concurrency:
  group: terraform

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJson(inputs.environments) }}
    defaults:
      run:
        working-directory: terraform
    env:
      TF_IN_AUTOMATION: true
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Set Up Terraform
        id: install_terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2

      - name: Configure AWS Credentials
        id: configure_aws_credentials
        uses: aws-actions/configure-aws-credentials@00943011d9042930efac3dcd3a170e4273319bc8 # v5.1.0
        with:
          aws-region: eu-west-2
          role-to-assume: arn:aws:iam::509399598587:role/analytical-platform-github-actions

      - name: Initialise Terraform
        id: initialise_terraform
        shell: bash
        run: |
          terraform init -upgrade -input=false

      - name: Terraform Workspace
        id: terraform_workspace
        shell: bash
        env:
          ENVIRONMENT: ${{ matrix.environment }}
        run: |
          terraform workspace select -or-create "${ENVIRONMENT}"

      - name: Terraform Validate
        if: github.ref != 'refs/heads/main'
        id: terraform_validate
        shell: bash
        run: |
          terraform validate -no-color

      - name: Terraform Plan
        id: terraform_plan
        shell: bash
        env:
          ENVIRONMENT: ${{ matrix.environment }}
        run: |
          terraform plan -input=false -parallelism=20 -out="${ENVIRONMENT}.tfplan"

      - name: Process Terraform Plan
        if: github.event_name == 'pull_request'
        id: process_terraform_plan
        shell: bash
        run: |
          PLAN_OUTPUT=$(bash scripts/terraform/plan-processor.sh)
          echo "${PLAN_OUTPUT}"
          {
            echo "plan-summary<<EOF"
            echo "${PLAN_OUTPUT}"
            echo "EOF"
          } >>"${GITHUB_OUTPUT}"

      - name: Comment on Pull Request
        if: github.event_name == 'pull_request'
        id: comment
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        env:
          ENVIRONMENT: ${{ matrix.environment }}
          PLAN_SUMMARY: ${{ steps.process_terraform_plan.outputs.plan-summary }}
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })

            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan Summary (${process.env.ENVIRONMENT})')
            })

            const output = `${process.env.PLAN_SUMMARY}`;

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        id: terraform_apply
        shell: bash
        env:
          ENVIRONMENT: ${{ matrix.environment }}
        run: |
          terraform apply -auto-approve -input=false "${ENVIRONMENT}.tfplan"
