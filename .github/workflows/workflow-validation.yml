---
name: 🛂 Workflow Validation

on:
  pull_request:
    branches:
      - main
    paths:
      - environments/**

permissions: {}

jobs:
  detect-changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    outputs:
      workflows: ${{ steps.detect_changes.outputs.changes }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Build path-filters File
        id: build_path_filters
        run: bash scripts/path-filter/configuration-generator.sh workflows

      - name: Detect Changes
        id: detect_changes
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        with:
          filters: .github/path-filter/workflows.yml

      - name: Check Changed Length
        id: check_changed_length
        env:
          CHANGES: ${{ steps.detect_changes.outputs.changes }}
        run: |
          if [[ "$(jq 'length > 1' <<< '${CHANGES}')" == "true" ]]; then
            echo "Multiple workflows changed, exiting..."
            exit 1
          fi

      - name: Comment on Length Check Failure
        id: comment_on_test_failure
        if: failure() && steps.check_changed_length.outcome == 'failure'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Changes to multiple workflows detected. Please ensure only one workflow is changed at a time.'
            })

      - name: Upload path-filters File
        id: upload_path_filter
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: workflows-path-filter
          path: .github/path-filter/workflows.yml

  workflow-validation:
    if: ${{ needs.detect-changes.outputs.workflows != '[]' }}
    needs: [detect-changes]
    name: 🛂 Workflow Validation
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        workflow: ${{ fromJson(needs.detect-changes.outputs.workflows) }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Set Up UV
        id: setup_uv
        uses: astral-sh/setup-uv@22695119d769bdb6f7032ad67b9bca0ef8c4a174 # v5.4.0
        with:
          version: "latest"
          python-version: "3.11"

      - name: Install Requirements
        id: install_requirements
        run: |
          uv pip install --requirements requirements.txt

      - name: Download path-filters File
        id: download_path_filters
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
        with:
          name: workflows-path-filter
          path: .github/path-filter

      - name: Set Workflow Directory
        id: set_workflow_directory
        env:
          WORKFLOW: ${{ matrix.workflow }}
        run: |
          workflowDirectory=$(yq -e ".${WORKFLOW}" .github/path-filter/workflows.yml | sed 's/.\{3\}$//')
          export workflowDirectory

          echo "workflow-directory=${workflowDirectory}" >>"${GITHUB_ENV}"

      - name: Validate Schema
        id: validate_schema
        run: |
          python scripts/workflow_schema_validation/main.py "${{ env.workflow-directory }}/workflow.yml"

      - name: Generate Workflow
        id: generate_workflow
        run: |
          python scripts/workflow_generator/main.py "${{ env.workflow-directory }}/workflow.yml"

      - name: Validate Workflow
        id: validate_workflow
        env:
          PYTHONPATH: airflow
        run: |
          workflowDirectory="${{ env.workflow-directory }}"
          distWorkflowDirectory=${workflowDirectory#environments/}

          python scripts/workflow_validation/main.py "dist/dags/${distWorkflowDirectory}/workflow.yml"

  image-check:
    if: ${{ needs.detect-changes.outputs.workflows != '[]' }}
    needs: [detect-changes, workflow-validation]
    name: 📦 Image Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    strategy:
      fail-fast: false
      matrix:
        workflow: ${{ fromJson(needs.detect-changes.outputs.workflows) }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Clean Actions Runner
        id: clean_actions_runner
        uses: ministryofjustice/github-actions/clean-actions-runner@db1a54895bf5fb975c60af47e5a3aab96505ca3e # v18.6.0
        with:
          confirm: true

      - name: Set Up Container Structure Test
        id: setup_container_structure_test
        uses: ministryofjustice/github-actions/setup-container-structure-test@db1a54895bf5fb975c60af47e5a3aab96505ca3e # v18.6.0

      - name: Download path-filters File
        id: download_path_filters
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
        with:
          name: workflows-path-filter
          path: .github/path-filter

      - name: Configure AWS Credentials
        id: configure_aws_credentials
        uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722 # v4.1.0
        with:
          aws-region: eu-west-2
          role-to-assume: arn:aws:iam::509399598587:role/ecr-access

      - name: Log in to Amazon ECR
        id: ecr_login
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

      - name: Set Workflow Directory
        id: set_workflow_directory
        env:
          WORKFLOW: ${{ matrix.workflow }}
        run: |
          workflowDirectory=$(yq -e ".${WORKFLOW}" .github/path-filter/workflows.yml | sed 's/.\{3\}$//')
          export workflowDirectory

          echo "workflow-directory=${workflowDirectory}" >>"${GITHUB_ENV}"

      - name: Set ECR Repository
        id: set_ecr_repository
        run: |
          dagRepository=$(yq -e ".dag.repository" "${{ env.workflow-directory }}/workflow.yml")
          export dagRepository

          ecrRepository=$(echo "${dagRepository}" | tr '[:upper:]' '[:lower:]' | sed 's/_/-/g')
          export ecrRepository

          dagTag=$(yq -e ".dag.tag" "${{ env.workflow-directory }}/workflow.yml")
          export dagTag

          echo "ecr-repository=${ecrRepository}" >>"${GITHUB_ENV}"
          echo "image-tag=${dagTag}" >>"${GITHUB_ENV}"

      - name: Check Image Exists
        id: check_image_exists
        run: |
          aws ecr describe-images --repository-name "${{ env.ecr-repository }}" --image-ids imageTag="${{ env.image-tag }}" || exit 1

      - name: Comment on Image Check Failure
        id: comment_on_check_failure
        if: failure() && steps.check_image_exists.outcome == 'failure'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Specified image does not exist in the container registry. Please check the supplied image tag is correct, and it has been pushed successfully. Refer to the [User Guidance](https://user-guidance.analytical-platform.service.justice.gov.uk/services/airflow/index.html#create-a-github-release) for more information.'
            })

      - name: Pull Image
        id: pull_image
        run: |
          docker pull "509399598587.dkr.ecr.eu-west-2.amazonaws.com/${{ env.ecr-repository }}:${{ env.image-tag }}"

      - name: Fetch Container Structure Test
        id: fetch_container_structure_test
        run: |
          curl --silent --show-error --location https://raw.githubusercontent.com/ministryofjustice/analytical-platform-airflow-github-actions/refs/heads/main/assets/container-structure-test/container-structure-test.yml --output container-structure-test.yml

      - name: Container Structure Test
        id: container_structure_test
        shell: bash
        run: |
          container-structure-test test --config container-structure-test.yml --image "509399598587.dkr.ecr.eu-west-2.amazonaws.com/${{ env.ecr-repository }}:${{ env.image-tag }}"

      - name: Comment on Image Test Failure
        id: comment_on_test_failure
        if: failure() && steps.container_structure_test.outcome == 'failure'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Container test has failed. Refer to the [User Guidance](https://user-guidance.analytical-platform.service.justice.gov.uk/services/airflow/index.html#configuration-testing) for more information.'
            })

      - name: Generate Trivy Ignore
        id: generate_trivy_ignore
        env:
          GH_TOKEN: ${{ secrets.DATA_PLATFORM_ROBOT_TOKEN }}
        run: |
          dagRepository=$(yq -e ".dag.repository" "${{ env.workflow-directory }}/workflow.yml")
          export dagRepository

          dagTag=$(yq -e ".dag.tag" "${{ env.workflow-directory }}/workflow.yml")
          export dagTag

          downloadDockerfile=$(gh api "repos/${dagRepository}/contents/Dockerfile?ref=${dagTag}" 2>/dev/null || true)
          export downloadDockerfile

          downloadDockerfileStatus=$(jq -r '.status' <<< "${downloadDockerfile}")
          export downloadDockerfileStatus

          if [[ "${downloadDockerfileStatus}" == "null" ]]; then
            jq -r '.content' <<< "${downloadDockerfile}" | base64 --decode > Dockerfile
          elif [[ "${downloadDockerfileStatus}" == "404" ]]; then
            echo "Dockerfile not found"
            exit 1
          else
            echo "Error downloading Dockerfile"
            exit 1
          fi

          downloadTrivyignore=$(gh api "repos/${dagRepository}/contents/.trivyignore?ref=${dagTag}" 2>/dev/null || true)
          export downloadTrivyignore

          downloadTrivyignoreStatus=$(jq -r '.status' <<< "${downloadTrivyignore}")
          export downloadTrivyignoreStatus

          if [[ "${downloadTrivyignoreStatus}" == "null" ]]; then
            jq -r '.content' <<< "${downloadTrivyignore}" | base64 --decode > .trivyignore
          elif [[ "${downloadTrivyignoreStatus}" == "404" ]]; then
            echo ".trivyignore not found"
          else
            echo "Error downloading .trivyignore"
            exit 1
          fi

          imageName=$(grep "^FROM" Dockerfile | cut -d' ' -f2 | cut -d':' -f1 | cut -d'@' -f1)
          export imageName

          imageVersion=$(grep "^FROM" Dockerfile | cut -d':' -f2 | cut -d'@' -f1)
          export imageVersion

          imageRepo=${imageName#ghcr.io/}

          curl --silent --show-error --location "https://raw.githubusercontent.com/${imageRepo}/refs/tags/${imageVersion}/.trivyignore" --output "runtime-trivyignore"

          if [[ ! -f .trivyignore ]]; then
            mv "runtime-trivyignore" .trivyignore
          else
            cat "runtime-trivyignore" >> .trivyignore
          fi

      - name: Scan
        id: scan
        uses: aquasecurity/trivy-action@6c175e9c4083a92bbca2f9724c8a5e33bc2d97a5 # v0.30.0
        env:
          TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db:2
          TRIVY_JAVA_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-java-db:1
        with:
          image-ref: 509399598587.dkr.ecr.eu-west-2.amazonaws.com/${{ env.ecr-repository }}:${{ env.image-tag }}
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          vuln-type: library
          timeout: 10m0s
          exit-code: 1

      - name: Comment on Scan Failure
        id: comment_on_scan_failure
        if: failure() && steps.scan.outcome == 'failure'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Container scan has failed. Refer to the [User Guide](https://user-guidance.analytical-platform.service.justice.gov.uk/services/airflow/index.html#vulnerability-scanning) for more information.'
            })

  automatic-approval-gate:
    if: ${{ needs.detect-changes.outputs.workflows != '[]' }}
    # needs: [detect-changes, workflow-validation, image-check]
    needs: [detect-changes]
    name: 🛂 Automatic Approval Gate
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Automatic Approval Check
        id: automatic_approval_check
        run: |
          git fetch origin main

          changed_files=$(git diff --name-only origin/main)
          changed_files_status=$(git diff --name-status origin/main | awk '{ print $1 }')

          echo "${changed_files}"
          echo "${changed_files_status}"

          # Default to true
          eligible="true"

          # # Check if any files were added or deleted
          # for status in ${changed_files_status}; do
          #   if [[ ${status} != "M" ]]; then
          #     echo "File status ${status} detected, not eligible for automatic approval"
          #     eligible="false"
          #     break
          #   fi
          # done

          # # Check if any files outside the specified path were changed
          # for file in ${changed_files}; do
          #   if [[ ${file} != "environments/development/*" ]]; then
          #     echo "File ${file} changed outside the specified path, not eligible for automatic approval"
          #     eligible="false"
          #     break
          #   fi
          # done

          # if [[ ${eligible} == "true" ]]; then
          #   echo "Eligible for automatic approval"
          # else
          #   echo "Not eligible for automatic approval"
          # fi

          echo "eligible=${eligible}" >>"${GIHUB_OUTPUT}"

      - name: Automatic Approval
        if: steps.automatic_approval_check.outputs.eligible == 'true'
        id: automatic_approval
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.DATA_PLATFORM_ROBOT_TOKEN }}
          script: |
            github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              body: 'Automatic approval requirements satisfied.',
              event: 'APPROVE'
            })
